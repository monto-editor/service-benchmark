package benchmark.python;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import monto.service.message.Languages;
import monto.service.message.LongKey;
import monto.service.message.Selection;
import monto.service.message.Source;
import monto.service.message.VersionMessage;

public class PythonTestContents {
	
	public static final String LINES10 = "my_name = \"Simon Strong\"\n\nprint(\"Hello \" + my_name)\n\nage = 28\n\nif age < 18:\n    print \"You're too young!\"\nelse:\n    print \"You're too adult!\"\n"; 
	public static final String LINES100 = "#! python\n# -*- coding: utf-8 -*- taken from https://github.com/FreeCAD/FreeCAD/blob/master/BuildRelease.py\n# (c) 2007 Jürgen Riegel  GPL \n\nUsage = \"\"\"BuildRelease - Build script to build a complete FreeCAD release\nUsage:\n   BuildRelease [Optionen] ReleaseNbr\n   \nOptions:\n -h, --help          print this help\n -b, --buildPath     specify the output path where the build takes place\n -i, --ini-file      specify the ini file to use\n \nThis script will build a complete FreeCAD distribution which includes:\n* Check out fresh source\n* packing source\n* Set the Version and Release numbers\n* Gathering change log\n* completele build FreeCAD\n* run tests\n* build source docu\n* build user docu\n* build installer\n* upload to source forge \n   \nOn failure of one of these steps the script will stop.\nEach step writes tones of info in the log file.\nThere is one error log file.\nAutor:\n  (c) 2007 Juergen Riegel\n  juergen.riegel@web.de\n\tLicence: GPL\nVersion:\n  0.1\n\"\"\"\n#  \n# Its inteded only to used by the maintainer\n\nimport os, sys, getopt\nfrom subprocess import call,Popen,PIPE\nfrom time import sleep\nfrom zipfile import ZipFile,ZIP_DEFLATED\nimport tarfile\nfrom string import find\nimport ConfigParser\nimport time\n\n\n# global information \nRelease = 0\nMajor = 0\nMinor = 7\nAlias = \"\"\nFileName = \"\"\nBuildPath = \"D:/ReleaseBuilds\"\nLog = None\nErrLog = None\nConfig = None\n\n\ndef CallProcess(args,Msg,ret=True):\n\tAnim = ['-','\\\\','|','/']\n\t\n\tsys.stdout.write(Msg+':  ')\n\tLog.write(\"====== Call: \" + args[0] + '\\n')\n\tSVN = Popen(args,\n\t            stdout=PIPE, stderr = ErrLog)\n\t\n\ti = 0\n\twhile(SVN.poll() == None):\n\t\tline = SVN.stdout.readline()\n\t\tif(line):\n\t\t\tLog.write(line.replace('\\n',''))\n\t\tsys.stdout.write(chr(8) + Anim[i%4])\n\t\ti+=1\n\t\tsleep(0.2)\n\t\n\t#ErrLog.write(SVN.stdout.read())\n\tsys.stdout.write(chr(8) + \"done\\n\")\n\tif(not SVN.returncode == 0 and ret):\n\t\tprint \"Process returns: \",SVN.returncode\n\t\traise\n\n# Step 2 & 3\ndef CheckOut():\n\t\n\tCallProcess([Config.get('Tools','svn'), \n\t             \"checkout\",\n\t\t\t\t \"-r\",\n\t\t\t\t `Release`,\n\t\t\t\t \"https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk\",\n\t\t\t\t \"../\"+FileName],\n\t\t\t\t \"2) Checking out\")\n\n\tsys.stdout.write('3) Write version files: ')\n\t\n\tVersion = open(\"src/Build/Version.h\",\"w\")\n\tVersion.write('#define FCVersionMajor \"' + `Major` + '\"\\n')\n\tVersion.write('#define FCVersionMinor \"' + `Minor` + '\"\\n')\n\tVersion.write('#define FCVersionName \"' + Alias + '\"\\n')\n"; 
	public static final String LINES1000 = "#! python\n# -*- coding: utf-8 -*-\n# (c) 2007 Jürgen Riegel  GPL\n\nUsage = \"\"\"BuildRelease - Build script to build a complete FreeCAD release\nUsage:\n   BuildRelease [Optionen] ReleaseNbr\n   \nOptions:\n -h, --help          print this help\n -b, --buildPath     specify the output path where the build takes place\n -i, --ini-file      specify the ini file to use\n \nThis script will build a complete FreeCAD distribution which includes:\n* Check out fresh source\n* packing source\n* Set the Version and Release numbers\n* Gathering change log\n* completele build FreeCAD\n* run tests\n* build source docu\n* build user docu\n* build installer\n* upload to source forge \n   \nOn failure of one of these steps the script will stop.\nEach step writes tones of info in the log file.\nThere is one error log file.\nAutor:\n  (c) 2007 Juergen Riegel\n  juergen.riegel@web.de\n\tLicence: GPL\nVersion:\n  0.1\n\"\"\"\n#  \n# Its inteded only to used by the maintainer\n\nimport os, sys, getopt\nfrom subprocess import call,Popen,PIPE\nfrom time import sleep\nfrom zipfile import ZipFile,ZIP_DEFLATED\nimport tarfile\nfrom string import find\nimport ConfigParser\nimport time\n\n\n# global information \nRelease = 0\nMajor = 0\nMinor = 7\nAlias = \"\"\nFileName = \"\"\nBuildPath = \"D:/ReleaseBuilds\"\nLog = None\nErrLog = None\nConfig = None\n\n\ndef CallProcess(args,Msg,ret=True):\n\tAnim = ['-','\\\\','|','/']\n\t\n\tsys.stdout.write(Msg+':  ')\n\tLog.write(\"====== Call: \" + args[0] + '\\n')\n\tSVN = Popen(args,\n\t            stdout=PIPE, stderr = ErrLog)\n\t\n\ti = 0\n\twhile(SVN.poll() == None):\n\t\tline = SVN.stdout.readline()\n\t\tif(line):\n\t\t\tLog.write(line.replace('\\n',''))\n\t\tsys.stdout.write(chr(8) + Anim[i%4])\n\t\ti+=1\n\t\tsleep(0.2)\n\t\n\t#ErrLog.write(SVN.stdout.read())\n\tsys.stdout.write(chr(8) + \"done\\n\")\n\tif(not SVN.returncode == 0 and ret):\n\t\tprint \"Process returns: \",SVN.returncode\n\t\traise\n\n# Step 2 & 3\ndef CheckOut():\n\t\n\tCallProcess([Config.get('Tools','svn'), \n\t             \"checkout\",\n\t\t\t\t \"-r\",\n\t\t\t\t `Release`,\n\t\t\t\t \"https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk\",\n\t\t\t\t \"../\"+FileName],\n\t\t\t\t \"2) Checking out\")\n\n\tsys.stdout.write('3) Write version files: ')\n\t\n\tVersion = open(\"src/Build/Version.h\",\"w\")\n\tVersion.write('#define FCVersionMajor \"' + `Major` + '\"\\n')\n\tVersion.write('#define FCVersionMinor \"' + `Minor` + '\"\\n')\n\tVersion.write('#define FCVersionName \"' + Alias + '\"\\n')\n\tVersion.write('#define FCRevision \"' + `Release` + '\"\\n')\n\tVersion.write('#define FCRepositoryURL \"' + \"https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk/src\" + '\"\\n')\n\tVersion.write('#define FCCurrentDateT  \"'+time.asctime()+'\"  \\n')\n\tVersion.close()\n\t\n\tVersion = open(\"installer/Version.wxi\",\"w\")\n\tVersion.write('<Include> \\n')\n\tVersion.write('   <?define FCVersionMajor = ' + `Major` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionMinor = ' + `Minor` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionRevision =' + `Release` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionAlias = \"' + Alias + '\" ?>\\n')\n\tVersion.write('</Include> \\n')\n\tVersion.close()\n\t\n\tsys.stdout.write('done\\n')\n\n\n#Step 4\ndef PackSourceZip():\n\n\tdef addAll(dirFrom, ZipSrcFile):\n\t\tfor file in os.listdir(dirFrom):                      # for files/dirs here\n\t\t\tif(not file==\".svn\" and not file== FileName+'_source.zip'):\n\t\t\t\tpathFrom = os.path.join(dirFrom, file)\n\t\t\t\tif not os.path.isdir(pathFrom):                   # copy simple files\n\t\t\t\t\tZipSrcFile.write(pathFrom,pathFrom.replace('.\\\\',FileName+'\\\\'))\n\t\t\t\t\tLog.write(\"Insert: \"+ pathFrom + '\\n')\n\t\t\t\telse:\n\t\t\t\t\taddAll(pathFrom,ZipSrcFile)\n\t\t\t\t\t\n\tsys.stdout.write(\"4) Pack zip source files: \")\n\t\n\tSourceFile = ZipFile(FileName+'_source.zip','w',ZIP_DEFLATED,True)\n\taddAll('.',SourceFile)\n\tSourceFile.close()\n\t\n\tsys.stdout.write(\"done \\n\")\n\n# Step 5\ndef PackSourceTar():\n\n\tdef addAll(dirFrom, ZipTarFile):\n\t\tfor file in os.listdir(dirFrom):                      # for files/dirs here\n\t\t\tif(not file==\".svn\" and not file== FileName+'_source.zip'):\n\t\t\t\tpathFrom = os.path.join(dirFrom, file)\n\t\t\t\tif not os.path.isdir(pathFrom):                   # copy simple files\n\t\t\t\t\tZipTarFile.add(pathFrom,pathFrom.replace('.\\\\',FileName+'\\\\'))\n\t\t\t\t\tLog.write(\"Insert: \"+ pathFrom + '\\n')\n\t\t\t\telse:\n\t\t\t\t\taddAll(pathFrom,ZipTarFile)\n\t\t\t\t\t\n\tsys.stdout.write(\"5) Pack tar source files: \")\n\t\n\tSourceFile = tarfile.open(FileName+'_source.tgz','w:gz')\n\taddAll('.',SourceFile)\n\tSourceFile.close()\n\t\n\tsys.stdout.write(\"done \\n\")\n\n\n# Step 6 & 7\t\ndef BuildAll():\n\timport fcbt.FileTools\n\tLibPack = Config.get('Libs','FreeCADLib')\n\t\n\tsys.stdout.write('6) Copy resources: ')\n\tos.mkdir('./bin')\n\tfcbt.FileTools.cpall(LibPack + '/bin','./bin')\n\tos.mkdir('./include')\n\tfcbt.FileTools.cpall(LibPack + '/include','./include')\n\tos.mkdir('./lib')\n\tfcbt.FileTools.cpall(LibPack + '/lib','./lib')\n\tos.mkdir('./doc')\n\tfcbt.FileTools.cpall(LibPack + '/doc','./doc')\n\tsys.stdout.write('done\\n')\n\t\n\tCallProcess([\"BuildAll.bat\"],\n\t\t\t\t \"7) Build all\")\n\t\n# Step 8 & 9\ndef HelpFile():\n\timport wiki2chm\n\tif not os.path.isdir('doc'):\n\t\tos.mkdir('doc')\n\tif not os.path.isdir('doc/tmp'):\n\t\tos.mkdir('doc/tmp')\n\t\t\n\tCallProcess([Config.get('Tools','wget'),'-k', '-r', '-l5', '-P', 'doc/tmp', '-nd', \n\t            '-R', '*action=*',\n\t\t\t\t'-R', '*title=Special*',\n\t\t\t\t'-R', '*title=Talk*',\n\t\t\t\t'-R', '*oldid=*',\n\t\t\t\t'-R', '*printable=yes*',\n\t\t\t\t'--domains=apps.sourceforge.net',\n\t\t\t\t'--append-output=doc/tmp/wget.log',\n\t\t\t\t'http://apps.sourceforge.net/mediawiki/free-cad/index.php?title=Online_Help_Toc'],\n\t\t\t\t \"8) Download docu\")\n\n\tsys.stdout.write(\"9) Fix up CSS: \")\n\topen('doc/tmp/chm.css','w').write(open('src/Tools/chm.css').read())\n\t\n\twiki2chm.WikiBaseUrl ='http://apps.sourceforge.net/mediawiki/free-cad/'\n\twiki2chm.TocPageName ='Online_Help_Toc'\n\twiki2chm.BasePath ='doc/tmp/'\n\twiki2chm.Output = Log\n\n\twiki2chm.replaceCSS()\n\t\n\twiki2chm.WriteProject()\n\twiki2chm.readToc()\n\tsys.stdout.write(\"done \\n\")\n\t\n# Step 10\ndef CompileHelp():\n\timport fcbt.FileTools\n\tCallProcess([Config.get('Tools','hhc'),'doc/tmp/Online_Help_Toc.hhp'],'10)Compile help:',False)\n\tfcbt.FileTools.cpfile('doc/tmp/FreeCAD.chm','doc/FreeCAD.chm')\n\tfcbt.FileTools.cpfile('doc/tmp/FreeCAD.chm',FileName+'_helpfile.chm')\n\ndef BuildInstaller():\n\timport fcbt.FileTools\n\tLibPack = Config.get('Libs','FreeCADLib')\n\t\n\tfcbt.FileTools.cpfile('lib/Microsoft_VC80_CRT_x86.msm','installer/Microsoft_VC80_CRT_x86.msm')\n\tfcbt.FileTools.cpfile('lib/policy_8_0_Microsoft_VC80_CRT_x86.msm','installer/policy_8_0_Microsoft_VC80_CRT_x86.msm')\n\tCallProcess([Config.get('Tools','candle'),\n\t\t\t\t '-out', 'installer\\\\',\n\t             'installer\\\\FreeCAD.wxs',\n\t             'installer\\\\FreeCADBase.wxs',\n\t             'installer\\\\LibPack.wxs',\n\t             'installer\\\\FreeCADDoc.wxs',\n\t             'installer\\\\FreeCADModules.wxs',\n\t\t\t\t ],'11)Compile installer:',False) \n\tCallProcess([Config.get('Tools','light'),\n\t\t\t\t '-ext', 'WixUIExtension',\n\t\t\t\t '-cultures:en-us',\n\t\t\t\t '-out', 'installer\\\\FreeCAD.msi',\n\t             'installer\\\\FreeCAD.wixobj',\n\t             'installer\\\\FreeCADBase.wixobj',\n\t             'installer\\\\LibPack.wixobj',\n\t             'installer\\\\FreeCADDoc.wixobj',\n\t             'installer\\\\FreeCADModules.wixobj',\n\t\t\t\t ],'12)Build installer:',False)\n\t\t\t\t \n\tfcbt.FileTools.cpfile('installer/FreeCAD.msi',FileName+'_installer.msi')\n\t\ndef SendFTP():\n\tfrom ftplib import FTP\n\tftp = FTP('upload.sf.net')\n\tLog.write(ftp.login() + '\\n')\n\tLog.write(ftp.cwd(\"/incoming\") + '\\n')\n\tLog.write(ftp.sendcmd('PASV') + '\\n')\n\tLog.write(ftp.sendcmd('TYPE I') + '\\n')\n\tsys.stdout.write('13) Send source ZIP: ')\n\tf = open(FileName+'_source.zip', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_source.zip', f)  + '\\n')\n\tsys.stdout.write('done\\n14) Send source tgz: ')\n\tf = open(FileName+'_source.tgz', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_source.tgz', f)  + '\\n')\n\tsys.stdout.write('done\\n15) Send installer: ')\n\tf = open(FileName+'_installer.msi', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_installer.msi', f)  + '\\n')\n\tf.close()\n\tftp.close()\n\t\ndef main():\n\tglobal Release, Major, Minor, Alias, FileName, BuildPath, Log, ErrLog, Config\n\tIniFile = \"BuildRelease.ini\"\n\ttry:\n\t\topts, args = getopt.getopt(sys.argv[1:], \"hb:\", [\"help\",\"buildPath=\"])\n\texcept getopt.GetoptError:\n\t\t# print help information and exit:\n\t\tsys.stderr.write(Usage)\n\t\tsys.exit(2)\n\n\t# checking on the options\n\tfor o, a in opts:\n\t\tif o in (\"-h\", \"--help\"):\n\t\t\tsys.stderr.write(Usage)\n\t\t\tsys.exit()\n\t\tif o in (\"-b\", \"--buildPath\"):\n\t\t\tBuildPath = a\n\t\tif o in (\"-i\", \"--ini-file\"):\n\t\t\tIniFile = a\n\n\n\t# runing through the files\n\tif (not len(args) == 1):\n\t\tsys.stderr.write(Usage)\n\t\n\tRelease = int(args[0])\n\t\n\tConfig = ConfigParser.ConfigParser()\n\tConfig.readfp(open(IniFile))\n\t\n\tAlias   = Config.get('Version','Alias')\n\tMajor   = Config.getint('Version','Major')\n\tMinor   = Config.getint('Version','Minor')\n\n\t# creating the directory and switch to\n\tFileName = 'FreeCAD_' + `Major` + '.' + `Minor` + '.' + `Release`\n\tprint \"=== Building:\", FileName, '\\n'\n\tBuildPath = BuildPath + '/' + FileName\n\t# set tool path \n\tsys.path.append((BuildPath + '/src/Tools') )\n\tOldCwd = os.getcwd()\n\tprint \"1) Creating Build directory: \", BuildPath\n\tif not os.path.isdir(BuildPath):\n\t\tos.mkdir(BuildPath)\n\tos.chdir(BuildPath)\n\tLog = open(\"BuildRelease.log\",\"w\")\n\tErrLog = open(\"BuildReleaseErrors.log\",\"w\")\n\t\n\ttry:\n\t\tCheckOut()\n\t\tPackSourceZip()\n\t\tPackSourceTar()\n\t\tBuildAll()\n\t\tHelpFile()\n\t\tCompileHelp()\n\t\tBuildInstaller()\n\t\t#SendFTP()\n\texcept:\n\t\tLog.close()\n\t\tErrLog.close()\n\t\tErr = open(\"BuildReleaseErrors.log\",\"r\")\n\t\tsys.stderr.write(\"!!!!!!!!! Fehler aufgetreten:\\n\")\n\t\tsys.stderr.write(Err.read())\n\t\traise\n\t\n\tos.chdir(OldCwd)\n\tLog.close()\n\tErrLog.close()\n\n\tprint \"Press any key\"\n\tsys.stdin.readline()\n\t\nif __name__ == \"__main__\":\n\tmain()\n#! python\n# -*- coding: utf-8 -*-\n# (c) 2007 Jürgen Riegel  GPL\n\nUsage = \"\"\"BuildRelease - Build script to build a complete FreeCAD release\nUsage:\n   BuildRelease [Optionen] ReleaseNbr\n   \nOptions:\n -h, --help          print this help\n -b, --buildPath     specify the output path where the build takes place\n -i, --ini-file      specify the ini file to use\n \nThis script will build a complete FreeCAD distribution which includes:\n* Check out fresh source\n* packing source\n* Set the Version and Release numbers\n* Gathering change log\n* completele build FreeCAD\n* run tests\n* build source docu\n* build user docu\n* build installer\n* upload to source forge \n   \nOn failure of one of these steps the script will stop.\nEach step writes tones of info in the log file.\nThere is one error log file.\nAutor:\n  (c) 2007 Juergen Riegel\n  juergen.riegel@web.de\n\tLicence: GPL\nVersion:\n  0.1\n\"\"\"\n#  \n# Its inteded only to used by the maintainer\n\nimport os, sys, getopt\nfrom subprocess import call,Popen,PIPE\nfrom time import sleep\nfrom zipfile import ZipFile,ZIP_DEFLATED\nimport tarfile\nfrom string import find\nimport ConfigParser\nimport time\n\n\n# global information \nRelease = 0\nMajor = 0\nMinor = 7\nAlias = \"\"\nFileName = \"\"\nBuildPath = \"D:/ReleaseBuilds\"\nLog = None\nErrLog = None\nConfig = None\n\n\ndef CallProcess(args,Msg,ret=True):\n\tAnim = ['-','\\\\','|','/']\n\t\n\tsys.stdout.write(Msg+':  ')\n\tLog.write(\"====== Call: \" + args[0] + '\\n')\n\tSVN = Popen(args,\n\t            stdout=PIPE, stderr = ErrLog)\n\t\n\ti = 0\n\twhile(SVN.poll() == None):\n\t\tline = SVN.stdout.readline()\n\t\tif(line):\n\t\t\tLog.write(line.replace('\\n',''))\n\t\tsys.stdout.write(chr(8) + Anim[i%4])\n\t\ti+=1\n\t\tsleep(0.2)\n\t\n\t#ErrLog.write(SVN.stdout.read())\n\tsys.stdout.write(chr(8) + \"done\\n\")\n\tif(not SVN.returncode == 0 and ret):\n\t\tprint \"Process returns: \",SVN.returncode\n\t\traise\n\n# Step 2 & 3\ndef CheckOut():\n\t\n\tCallProcess([Config.get('Tools','svn'), \n\t             \"checkout\",\n\t\t\t\t \"-r\",\n\t\t\t\t `Release`,\n\t\t\t\t \"https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk\",\n\t\t\t\t \"../\"+FileName],\n\t\t\t\t \"2) Checking out\")\n\n\tsys.stdout.write('3) Write version files: ')\n\t\n\tVersion = open(\"src/Build/Version.h\",\"w\")\n\tVersion.write('#define FCVersionMajor \"' + `Major` + '\"\\n')\n\tVersion.write('#define FCVersionMinor \"' + `Minor` + '\"\\n')\n\tVersion.write('#define FCVersionName \"' + Alias + '\"\\n')\n\tVersion.write('#define FCRevision \"' + `Release` + '\"\\n')\n\tVersion.write('#define FCRepositoryURL \"' + \"https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk/src\" + '\"\\n')\n\tVersion.write('#define FCCurrentDateT  \"'+time.asctime()+'\"  \\n')\n\tVersion.close()\n\t\n\tVersion = open(\"installer/Version.wxi\",\"w\")\n\tVersion.write('<Include> \\n')\n\tVersion.write('   <?define FCVersionMajor = ' + `Major` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionMinor = ' + `Minor` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionRevision =' + `Release` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionAlias = \"' + Alias + '\" ?>\\n')\n\tVersion.write('</Include> \\n')\n\tVersion.close()\n\t\n\tsys.stdout.write('done\\n')\n\n\n#Step 4\ndef PackSourceZip():\n\n\tdef addAll(dirFrom, ZipSrcFile):\n\t\tfor file in os.listdir(dirFrom):                      # for files/dirs here\n\t\t\tif(not file==\".svn\" and not file== FileName+'_source.zip'):\n\t\t\t\tpathFrom = os.path.join(dirFrom, file)\n\t\t\t\tif not os.path.isdir(pathFrom):                   # copy simple files\n\t\t\t\t\tZipSrcFile.write(pathFrom,pathFrom.replace('.\\\\',FileName+'\\\\'))\n\t\t\t\t\tLog.write(\"Insert: \"+ pathFrom + '\\n')\n\t\t\t\telse:\n\t\t\t\t\taddAll(pathFrom,ZipSrcFile)\n\t\t\t\t\t\n\tsys.stdout.write(\"4) Pack zip source files: \")\n\t\n\tSourceFile = ZipFile(FileName+'_source.zip','w',ZIP_DEFLATED,True)\n\taddAll('.',SourceFile)\n\tSourceFile.close()\n\t\n\tsys.stdout.write(\"done \\n\")\n\n# Step 5\ndef PackSourceTar():\n\n\tdef addAll(dirFrom, ZipTarFile):\n\t\tfor file in os.listdir(dirFrom):                      # for files/dirs here\n\t\t\tif(not file==\".svn\" and not file== FileName+'_source.zip'):\n\t\t\t\tpathFrom = os.path.join(dirFrom, file)\n\t\t\t\tif not os.path.isdir(pathFrom):                   # copy simple files\n\t\t\t\t\tZipTarFile.add(pathFrom,pathFrom.replace('.\\\\',FileName+'\\\\'))\n\t\t\t\t\tLog.write(\"Insert: \"+ pathFrom + '\\n')\n\t\t\t\telse:\n\t\t\t\t\taddAll(pathFrom,ZipTarFile)\n\t\t\t\t\t\n\tsys.stdout.write(\"5) Pack tar source files: \")\n\t\n\tSourceFile = tarfile.open(FileName+'_source.tgz','w:gz')\n\taddAll('.',SourceFile)\n\tSourceFile.close()\n\t\n\tsys.stdout.write(\"done \\n\")\n\n\n# Step 6 & 7\t\ndef BuildAll():\n\timport fcbt.FileTools\n\tLibPack = Config.get('Libs','FreeCADLib')\n\t\n\tsys.stdout.write('6) Copy resources: ')\n\tos.mkdir('./bin')\n\tfcbt.FileTools.cpall(LibPack + '/bin','./bin')\n\tos.mkdir('./include')\n\tfcbt.FileTools.cpall(LibPack + '/include','./include')\n\tos.mkdir('./lib')\n\tfcbt.FileTools.cpall(LibPack + '/lib','./lib')\n\tos.mkdir('./doc')\n\tfcbt.FileTools.cpall(LibPack + '/doc','./doc')\n\tsys.stdout.write('done\\n')\n\t\n\tCallProcess([\"BuildAll.bat\"],\n\t\t\t\t \"7) Build all\")\n\t\n# Step 8 & 9\ndef HelpFile():\n\timport wiki2chm\n\tif not os.path.isdir('doc'):\n\t\tos.mkdir('doc')\n\tif not os.path.isdir('doc/tmp'):\n\t\tos.mkdir('doc/tmp')\n\t\t\n\tCallProcess([Config.get('Tools','wget'),'-k', '-r', '-l5', '-P', 'doc/tmp', '-nd', \n\t            '-R', '*action=*',\n\t\t\t\t'-R', '*title=Special*',\n\t\t\t\t'-R', '*title=Talk*',\n\t\t\t\t'-R', '*oldid=*',\n\t\t\t\t'-R', '*printable=yes*',\n\t\t\t\t'--domains=apps.sourceforge.net',\n\t\t\t\t'--append-output=doc/tmp/wget.log',\n\t\t\t\t'http://apps.sourceforge.net/mediawiki/free-cad/index.php?title=Online_Help_Toc'],\n\t\t\t\t \"8) Download docu\")\n\n\tsys.stdout.write(\"9) Fix up CSS: \")\n\topen('doc/tmp/chm.css','w').write(open('src/Tools/chm.css').read())\n\t\n\twiki2chm.WikiBaseUrl ='http://apps.sourceforge.net/mediawiki/free-cad/'\n\twiki2chm.TocPageName ='Online_Help_Toc'\n\twiki2chm.BasePath ='doc/tmp/'\n\twiki2chm.Output = Log\n\n\twiki2chm.replaceCSS()\n\t\n\twiki2chm.WriteProject()\n\twiki2chm.readToc()\n\tsys.stdout.write(\"done \\n\")\n\t\n# Step 10\ndef CompileHelp():\n\timport fcbt.FileTools\n\tCallProcess([Config.get('Tools','hhc'),'doc/tmp/Online_Help_Toc.hhp'],'10)Compile help:',False)\n\tfcbt.FileTools.cpfile('doc/tmp/FreeCAD.chm','doc/FreeCAD.chm')\n\tfcbt.FileTools.cpfile('doc/tmp/FreeCAD.chm',FileName+'_helpfile.chm')\n\ndef BuildInstaller():\n\timport fcbt.FileTools\n\tLibPack = Config.get('Libs','FreeCADLib')\n\t\n\tfcbt.FileTools.cpfile('lib/Microsoft_VC80_CRT_x86.msm','installer/Microsoft_VC80_CRT_x86.msm')\n\tfcbt.FileTools.cpfile('lib/policy_8_0_Microsoft_VC80_CRT_x86.msm','installer/policy_8_0_Microsoft_VC80_CRT_x86.msm')\n\tCallProcess([Config.get('Tools','candle'),\n\t\t\t\t '-out', 'installer\\\\',\n\t             'installer\\\\FreeCAD.wxs',\n\t             'installer\\\\FreeCADBase.wxs',\n\t             'installer\\\\LibPack.wxs',\n\t             'installer\\\\FreeCADDoc.wxs',\n\t             'installer\\\\FreeCADModules.wxs',\n\t\t\t\t ],'11)Compile installer:',False) \n\tCallProcess([Config.get('Tools','light'),\n\t\t\t\t '-ext', 'WixUIExtension',\n\t\t\t\t '-cultures:en-us',\n\t\t\t\t '-out', 'installer\\\\FreeCAD.msi',\n\t             'installer\\\\FreeCAD.wixobj',\n\t             'installer\\\\FreeCADBase.wixobj',\n\t             'installer\\\\LibPack.wixobj',\n\t             'installer\\\\FreeCADDoc.wixobj',\n\t             'installer\\\\FreeCADModules.wixobj',\n\t\t\t\t ],'12)Build installer:',False)\n\t\t\t\t \n\tfcbt.FileTools.cpfile('installer/FreeCAD.msi',FileName+'_installer.msi')\n\t\ndef SendFTP():\n\tfrom ftplib import FTP\n\tftp = FTP('upload.sf.net')\n\tLog.write(ftp.login() + '\\n')\n\tLog.write(ftp.cwd(\"/incoming\") + '\\n')\n\tLog.write(ftp.sendcmd('PASV') + '\\n')\n\tLog.write(ftp.sendcmd('TYPE I') + '\\n')\n\tsys.stdout.write('13) Send source ZIP: ')\n\tf = open(FileName+'_source.zip', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_source.zip', f)  + '\\n')\n\tsys.stdout.write('done\\n14) Send source tgz: ')\n\tf = open(FileName+'_source.tgz', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_source.tgz', f)  + '\\n')\n\tsys.stdout.write('done\\n15) Send installer: ')\n\tf = open(FileName+'_installer.msi', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_installer.msi', f)  + '\\n')\n\tf.close()\n\tftp.close()\n\t\ndef main():\n\tglobal Release, Major, Minor, Alias, FileName, BuildPath, Log, ErrLog, Config\n\tIniFile = \"BuildRelease.ini\"\n\ttry:\n\t\topts, args = getopt.getopt(sys.argv[1:], \"hb:\", [\"help\",\"buildPath=\"])\n\texcept getopt.GetoptError:\n\t\t# print help information and exit:\n\t\tsys.stderr.write(Usage)\n\t\tsys.exit(2)\n\n\t# checking on the options\n\tfor o, a in opts:\n\t\tif o in (\"-h\", \"--help\"):\n\t\t\tsys.stderr.write(Usage)\n\t\t\tsys.exit()\n\t\tif o in (\"-b\", \"--buildPath\"):\n\t\t\tBuildPath = a\n\t\tif o in (\"-i\", \"--ini-file\"):\n\t\t\tIniFile = a\n\n\n\t# runing through the files\n\tif (not len(args) == 1):\n\t\tsys.stderr.write(Usage)\n\t\n\tRelease = int(args[0])\n\t\n\tConfig = ConfigParser.ConfigParser()\n\tConfig.readfp(open(IniFile))\n\t\n\tAlias   = Config.get('Version','Alias')\n\tMajor   = Config.getint('Version','Major')\n\tMinor   = Config.getint('Version','Minor')\n\n\t# creating the directory and switch to\n\tFileName = 'FreeCAD_' + `Major` + '.' + `Minor` + '.' + `Release`\n\tprint \"=== Building:\", FileName, '\\n'\n\tBuildPath = BuildPath + '/' + FileName\n\t# set tool path \n\tsys.path.append((BuildPath + '/src/Tools') )\n\tOldCwd = os.getcwd()\n\tprint \"1) Creating Build directory: \", BuildPath\n\tif not os.path.isdir(BuildPath):\n\t\tos.mkdir(BuildPath)\n\tos.chdir(BuildPath)\n\tLog = open(\"BuildRelease.log\",\"w\")\n\tErrLog = open(\"BuildReleaseErrors.log\",\"w\")\n\t\n\ttry:\n\t\tCheckOut()\n\t\tPackSourceZip()\n\t\tPackSourceTar()\n\t\tBuildAll()\n\t\tHelpFile()\n\t\tCompileHelp()\n\t\tBuildInstaller()\n\t\t#SendFTP()\n\texcept:\n\t\tLog.close()\n\t\tErrLog.close()\n\t\tErr = open(\"BuildReleaseErrors.log\",\"r\")\n\t\tsys.stderr.write(\"!!!!!!!!! Fehler aufgetreten:\\n\")\n\t\tsys.stderr.write(Err.read())\n\t\traise\n\t\n\tos.chdir(OldCwd)\n\tLog.close()\n\tErrLog.close()\n\n\tprint \"Press any key\"\n\tsys.stdin.readline()\n\t\nif __name__ == \"__main__\":\n\tmain()\n#! python\n# -*- coding: utf-8 -*-\n# (c) 2007 Jürgen Riegel  GPL\n\nUsage = \"\"\"BuildRelease - Build script to build a complete FreeCAD release\nUsage:\n   BuildRelease [Optionen] ReleaseNbr\n   \nOptions:\n -h, --help          print this help\n -b, --buildPath     specify the output path where the build takes place\n -i, --ini-file      specify the ini file to use\n \nThis script will build a complete FreeCAD distribution which includes:\n* Check out fresh source\n* packing source\n* Set the Version and Release numbers\n* Gathering change log\n* completele build FreeCAD\n* run tests\n* build source docu\n* build user docu\n* build installer\n* upload to source forge \n   \nOn failure of one of these steps the script will stop.\nEach step writes tones of info in the log file.\nThere is one error log file.\nAutor:\n  (c) 2007 Juergen Riegel\n  juergen.riegel@web.de\n\tLicence: GPL\nVersion:\n  0.1\n\"\"\"\n#  \n# Its inteded only to used by the maintainer\n\nimport os, sys, getopt\nfrom subprocess import call,Popen,PIPE\nfrom time import sleep\nfrom zipfile import ZipFile,ZIP_DEFLATED\nimport tarfile\nfrom string import find\nimport ConfigParser\nimport time\n\n\n# global information \nRelease = 0\nMajor = 0\nMinor = 7\nAlias = \"\"\nFileName = \"\"\nBuildPath = \"D:/ReleaseBuilds\"\nLog = None\nErrLog = None\nConfig = None\n\n\ndef CallProcess(args,Msg,ret=True):\n\tAnim = ['-','\\\\','|','/']\n\t\n\tsys.stdout.write(Msg+':  ')\n\tLog.write(\"====== Call: \" + args[0] + '\\n')\n\tSVN = Popen(args,\n\t            stdout=PIPE, stderr = ErrLog)\n\t\n\ti = 0\n\twhile(SVN.poll() == None):\n\t\tline = SVN.stdout.readline()\n\t\tif(line):\n\t\t\tLog.write(line.replace('\\n',''))\n\t\tsys.stdout.write(chr(8) + Anim[i%4])\n\t\ti+=1\n\t\tsleep(0.2)\n\t\n\t#ErrLog.write(SVN.stdout.read())\n\tsys.stdout.write(chr(8) + \"done\\n\")\n\tif(not SVN.returncode == 0 and ret):\n\t\tprint \"Process returns: \",SVN.returncode\n\t\traise\n\n# Step 2 & 3\ndef CheckOut():\n\t\n\tCallProcess([Config.get('Tools','svn'), \n\t             \"checkout\",\n\t\t\t\t \"-r\",\n\t\t\t\t `Release`,\n\t\t\t\t \"https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk\",\n\t\t\t\t \"../\"+FileName],\n\t\t\t\t \"2) Checking out\")\n\n\tsys.stdout.write('3) Write version files: ')\n\t\n\tVersion = open(\"src/Build/Version.h\",\"w\")\n\tVersion.write('#define FCVersionMajor \"' + `Major` + '\"\\n')\n\tVersion.write('#define FCVersionMinor \"' + `Minor` + '\"\\n')\n\tVersion.write('#define FCVersionName \"' + Alias + '\"\\n')\n\tVersion.write('#define FCRevision \"' + `Release` + '\"\\n')\n\tVersion.write('#define FCRepositoryURL \"' + \"https://free-cad.svn.sourceforge.net/svnroot/free-cad/trunk/src\" + '\"\\n')\n\tVersion.write('#define FCCurrentDateT  \"'+time.asctime()+'\"  \\n')\n\tVersion.close()\n\t\n\tVersion = open(\"installer/Version.wxi\",\"w\")\n\tVersion.write('<Include> \\n')\n\tVersion.write('   <?define FCVersionMajor = ' + `Major` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionMinor = ' + `Minor` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionRevision =' + `Release` + ' ?>\\n')\n\tVersion.write('   <?define FCVersionAlias = \"' + Alias + '\" ?>\\n')\n\tVersion.write('</Include> \\n')\n\tVersion.close()\n\t\n\tsys.stdout.write('done\\n')\n\n\n#Step 4\ndef PackSourceZip():\n\n\tdef addAll(dirFrom, ZipSrcFile):\n\t\tfor file in os.listdir(dirFrom):                      # for files/dirs here\n\t\t\tif(not file==\".svn\" and not file== FileName+'_source.zip'):\n\t\t\t\tpathFrom = os.path.join(dirFrom, file)\n\t\t\t\tif not os.path.isdir(pathFrom):                   # copy simple files\n\t\t\t\t\tZipSrcFile.write(pathFrom,pathFrom.replace('.\\\\',FileName+'\\\\'))\n\t\t\t\t\tLog.write(\"Insert: \"+ pathFrom + '\\n')\n\t\t\t\telse:\n\t\t\t\t\taddAll(pathFrom,ZipSrcFile)\n\t\t\t\t\t\n\tsys.stdout.write(\"4) Pack zip source files: \")\n\t\n\tSourceFile = ZipFile(FileName+'_source.zip','w',ZIP_DEFLATED,True)\n\taddAll('.',SourceFile)\n\tSourceFile.close()\n\t\n\tsys.stdout.write(\"done \\n\")\n\n# Step 5\ndef PackSourceTar():\n\n\tdef addAll(dirFrom, ZipTarFile):\n\t\tfor file in os.listdir(dirFrom):                      # for files/dirs here\n\t\t\tif(not file==\".svn\" and not file== FileName+'_source.zip'):\n\t\t\t\tpathFrom = os.path.join(dirFrom, file)\n\t\t\t\tif not os.path.isdir(pathFrom):                   # copy simple files\n\t\t\t\t\tZipTarFile.add(pathFrom,pathFrom.replace('.\\\\',FileName+'\\\\'))\n\t\t\t\t\tLog.write(\"Insert: \"+ pathFrom + '\\n')\n\t\t\t\telse:\n\t\t\t\t\taddAll(pathFrom,ZipTarFile)\n\t\t\t\t\t\n\tsys.stdout.write(\"5) Pack tar source files: \")\n\t\n\tSourceFile = tarfile.open(FileName+'_source.tgz','w:gz')\n\taddAll('.',SourceFile)\n\tSourceFile.close()\n\t\n\tsys.stdout.write(\"done \\n\")\n\n\n# Step 6 & 7\t\ndef BuildAll():\n\timport fcbt.FileTools\n\tLibPack = Config.get('Libs','FreeCADLib')\n\t\n\tsys.stdout.write('6) Copy resources: ')\n\tos.mkdir('./bin')\n\tfcbt.FileTools.cpall(LibPack + '/bin','./bin')\n\tos.mkdir('./include')\n\tfcbt.FileTools.cpall(LibPack + '/include','./include')\n\tos.mkdir('./lib')\n\tfcbt.FileTools.cpall(LibPack + '/lib','./lib')\n\tos.mkdir('./doc')\n\tfcbt.FileTools.cpall(LibPack + '/doc','./doc')\n\tsys.stdout.write('done\\n')\n\t\n\tCallProcess([\"BuildAll.bat\"],\n\t\t\t\t \"7) Build all\")\n\t\n# Step 8 & 9\ndef HelpFile():\n\timport wiki2chm\n\tif not os.path.isdir('doc'):\n\t\tos.mkdir('doc')\n\tif not os.path.isdir('doc/tmp'):\n\t\tos.mkdir('doc/tmp')\n\t\t\n\tCallProcess([Config.get('Tools','wget'),'-k', '-r', '-l5', '-P', 'doc/tmp', '-nd', \n\t            '-R', '*action=*',\n\t\t\t\t'-R', '*title=Special*',\n\t\t\t\t'-R', '*title=Talk*',\n\t\t\t\t'-R', '*oldid=*',\n\t\t\t\t'-R', '*printable=yes*',\n\t\t\t\t'--domains=apps.sourceforge.net',\n\t\t\t\t'--append-output=doc/tmp/wget.log',\n\t\t\t\t'http://apps.sourceforge.net/mediawiki/free-cad/index.php?title=Online_Help_Toc'],\n\t\t\t\t \"8) Download docu\")\n\n\tsys.stdout.write(\"9) Fix up CSS: \")\n\topen('doc/tmp/chm.css','w').write(open('src/Tools/chm.css').read())\n\t\n\twiki2chm.WikiBaseUrl ='http://apps.sourceforge.net/mediawiki/free-cad/'\n\twiki2chm.TocPageName ='Online_Help_Toc'\n\twiki2chm.BasePath ='doc/tmp/'\n\twiki2chm.Output = Log\n\n\twiki2chm.replaceCSS()\n\t\n\twiki2chm.WriteProject()\n\twiki2chm.readToc()\n\tsys.stdout.write(\"done \\n\")\n\t\n# Step 10\ndef CompileHelp():\n\timport fcbt.FileTools\n\tCallProcess([Config.get('Tools','hhc'),'doc/tmp/Online_Help_Toc.hhp'],'10)Compile help:',False)\n\tfcbt.FileTools.cpfile('doc/tmp/FreeCAD.chm','doc/FreeCAD.chm')\n\tfcbt.FileTools.cpfile('doc/tmp/FreeCAD.chm',FileName+'_helpfile.chm')\n\ndef BuildInstaller():\n\timport fcbt.FileTools\n\tLibPack = Config.get('Libs','FreeCADLib')\n\t\n\tfcbt.FileTools.cpfile('lib/Microsoft_VC80_CRT_x86.msm','installer/Microsoft_VC80_CRT_x86.msm')\n\tfcbt.FileTools.cpfile('lib/policy_8_0_Microsoft_VC80_CRT_x86.msm','installer/policy_8_0_Microsoft_VC80_CRT_x86.msm')\n\tCallProcess([Config.get('Tools','candle'),\n\t\t\t\t '-out', 'installer\\\\',\n\t             'installer\\\\FreeCAD.wxs',\n\t             'installer\\\\FreeCADBase.wxs',\n\t             'installer\\\\LibPack.wxs',\n\t             'installer\\\\FreeCADDoc.wxs',\n\t             'installer\\\\FreeCADModules.wxs',\n\t\t\t\t ],'11)Compile installer:',False) \n\tCallProcess([Config.get('Tools','light'),\n\t\t\t\t '-ext', 'WixUIExtension',\n\t\t\t\t '-cultures:en-us',\n\t\t\t\t '-out', 'installer\\\\FreeCAD.msi',\n\t             'installer\\\\FreeCAD.wixobj',\n\t             'installer\\\\FreeCADBase.wixobj',\n\t             'installer\\\\LibPack.wixobj',\n\t             'installer\\\\FreeCADDoc.wixobj',\n\t             'installer\\\\FreeCADModules.wixobj',\n\t\t\t\t ],'12)Build installer:',False)\n\t\t\t\t \n\tfcbt.FileTools.cpfile('installer/FreeCAD.msi',FileName+'_installer.msi')\n\t\ndef SendFTP():\n\tfrom ftplib import FTP\n\tftp = FTP('upload.sf.net')\n\tLog.write(ftp.login() + '\\n')\n\tLog.write(ftp.cwd(\"/incoming\") + '\\n')\n\tLog.write(ftp.sendcmd('PASV') + '\\n')\n\tLog.write(ftp.sendcmd('TYPE I') + '\\n')\n\tsys.stdout.write('13) Send source ZIP: ')\n\tf = open(FileName+'_source.zip', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_source.zip', f)  + '\\n')\n\tsys.stdout.write('done\\n14) Send source tgz: ')\n\tf = open(FileName+'_source.tgz', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_source.tgz', f)  + '\\n')\n\tsys.stdout.write('done\\n15) Send installer: ')\n\tf = open(FileName+'_installer.msi', \"r\") \n\tLog.write(ftp.storbinary('STOR '+ FileName+'_installer.msi', f)  + '\\n')\n\tf.close()\n\tftp.close()\n\t\ndef main():\n\tglobal Release, Major, Minor, Alias, FileName, BuildPath, Log, ErrLog, Config\n\tIniFile = \"BuildRelease.ini\"\n\ttry:\n\t\topts, args = getopt.getopt(sys.argv[1:], \"hb:\", [\"help\",\"buildPath=\"])\n\texcept getopt.GetoptError:\n\t\t# print help information and exit:\n\t\tsys.stderr.write(Usage)\n\t\tsys.exit(2)\n\n\t# checking on the options\n\tfor o, a in opts:\n\t\tif o in (\"-h\", \"--help\"):\n\t\t\tsys.stderr.write(Usage)\n\t\t\tsys.exit()\n\t\tif o in (\"-b\", \"--buildPath\"):\n\t\t\tBuildPath = a\n\t\tif o in (\"-i\", \"--ini-file\"):\n\t\t\tIniFile = a\n\n\n\t# runing through the files\n\tif (not len(args) == 1):\n\t\tsys.stderr.write(Usage)\n\t\n\tRelease = int(args[0])\n\t\n\tConfig = ConfigParser.ConfigParser()\n\tConfig.readfp(open(IniFile))\n\t\n\tAlias   = Config.get('Version','Alias')\n\tMajor   = Config.getint('Version','Major')\n\tMinor   = Config.getint('Version','Minor')\n\n\t# creating the directory and switch to\n\tFileName = 'FreeCAD_' + `Major` + '.' + `Minor` + '.' + `Release`\n\tprint \"=== Building:\", FileName, '\\n'\n\tBuildPath = BuildPath + '/' + FileName\n\t# set tool path \n\tsys.path.append((BuildPath + '/src/Tools') )\n\tOldCwd = os.getcwd()\n\tprint \"1) Creating Build directory: \", BuildPath\n\tif not os.path.isdir(BuildPath):\n\t\tos.mkdir(BuildPath)\n\tos.chdir(BuildPath)\n\tLog = open(\"BuildRelease.log\",\"w\")\n\tErrLog = open(\"BuildReleaseErrors.log\",\"w\")\n\t\n\ttry:\n\t\tCheckOut()\n\t\tPackSourceZip()\n\t\tPackSourceTar()\n\t\tBuildAll()\n\t\tHelpFile()\n\t\tCompileHelp()\n\texcept:\n\t\tLog.close()\n";
	
	public static final VersionMessage TESTMESSAGE_LINES10 = new VersionMessage(new LongKey(0L), new Source("python-10lines.py"), Languages.PYTHON, LINES10, new ArrayList<Selection>(Arrays.asList(new Selection(2, 1))));
	public static final VersionMessage TESTMESSAGE_LINES100 = new VersionMessage(new LongKey(0L), new Source("python-100lines.py"), Languages.PYTHON, LINES100, new ArrayList<Selection>(Arrays.asList(new Selection(139, 0))));
	public static final VersionMessage TESTMESSAGE_LINES1000 = new VersionMessage(new LongKey(0L), new Source("python-1000lines.py"), Languages.PYTHON, LINES1000, new ArrayList<Selection>(Arrays.asList(new Selection(929, 0))));	

}
